package com.liquidatom.derbyscore.ui;

import java.io.IOException;
import javax.imageio.ImageIO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Russell Francis (russ@metro-six.com)
 */
public class AboutDialog extends javax.swing.JFrame {

    static private final Logger log = LoggerFactory.getLogger(AboutDialog.class);
    
    public AboutDialog() {
        initComponents();
        setLocationRelativeTo(null);
        try {
            setIconImage(ImageIO.read(getClass().getResource("/gfx/brrg.png")));
        }
        catch (IOException e) {
            if (log.isErrorEnabled()) {
                log.error("Unable to set JFrame icon: " + e.getMessage(), e);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        contentPanel = new javax.swing.JPanel();
        tabbedContentPane = new javax.swing.JTabbedPane();
        aboutScrollPane = new javax.swing.JScrollPane();
        aboutTextArea = new javax.swing.JTextPane();
        licenseScrollPane = new javax.swing.JScrollPane();
        licenseTextArea = new javax.swing.JTextArea();
        usageScrollPane = new javax.swing.JScrollPane();
        usageTextArea = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        controlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gfx/ledgreen.png"))); // NOI18N
        okButton.setToolTipText("That is nice!");
        okButton.setLabel("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        controlPanel.add(okButton);

        getContentPane().add(controlPanel, java.awt.BorderLayout.SOUTH);

        aboutTextArea.setEditable(false);
        aboutTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        aboutTextArea.setText("DerbyScore by Russell Francis (russell.francis@gmail.com)\n\nDerby Score is a small application which can be used as a scoreboard for Roller Derby bouts. \nThough there are existing applications which aim to do similar things some commercial and \nothers free, we felt that there was room for improvement. One of the areas which we \nwanted to focus on was the visual appeal of the scoreboard making something which was \nflexible enough and pretty enough to satisfy our league, sponsers and fans.\n\nIf you have suggestions or would like to contribute to our effort to build a fantastic \nscoreboard utility for roller derby leagues throughout the world, please feel free to contact \nme.\n\nThanks,\n                               Russell Francis \n                               em: russ@metro-six.com\n                               em: russell.francis@gmail.com");
        aboutScrollPane.setViewportView(aboutTextArea);

        tabbedContentPane.addTab("About", aboutScrollPane);

        licenseScrollPane.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Simplified BSD License"));

        licenseTextArea.setColumns(20);
        licenseTextArea.setEditable(false);
        licenseTextArea.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        licenseTextArea.setRows(5);
        licenseTextArea.setText("Copyright 2009-2010 METRO SIX, INC. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are\npermitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice, this list of\n      conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice, this list\n      of conditions and the following disclaimer in the documentation and/or other materials\n      provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY METRO SIX, INC. ``AS IS'' AND ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL METRO SIX, INC. OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those of the\nauthors and should not be interpreted as representing official policies, either expressed\nor implied, of METRO SIX, INC.\n");
        licenseScrollPane.setViewportView(licenseTextArea);

        tabbedContentPane.addTab("License", licenseScrollPane);
        licenseTextArea.setSelectionStart(0);  licenseTextArea.setSelectionEnd(0);

        usageTextArea.setText("=================  COMMON KEYS =================\n\nCTRL + Up:       Add a point to the the jam tracker for the left team.\nCTRL + Down:  Remove a point from the jam tracker for the left team.\nCTRL + L:         Toggle lead jammer status on the left team.\n\nALT + Up:        Add a point to the the jam tracker for the left team.\nALT + Down:   Remove a point from the jam tracker for the left team.\nALT + L:          Toggle lead jammer status on the left team.\n\n=================  TOOLBAR KEYS =================\n\n[F1] - Start Jam:\n\nThis begins a 2:00 minute jam putting two minutes on the clock and beginning the count down.  This should be done when the starting whistle for the jam is heard.\n\n      - Linup:\n\nThis button will put :30 on the clock and begin counting down, this can be used when waiting for the initial whistle.\n\n[F2] - End Jam:\n\nThis will end the jam, putting :30 on the clock and beginning the countdown until the next jam should begin.\n\n      - Timeout\n\nThis will begin a 1:00 team initiated timeout, when this is executed, you must also manually adjust the timeouts left for a given team depending on who initiated the timeout.\n\n      - Official Timeout\n\nThis will freeze the scoreboard and should be used during an official  timeout.  There are also certain properties which can only be adjusted during an  official timeout such as the time left on the clock or the team logos.\n\n      - Show / Hide Scoreboard\n\nThis button will show / hide the stylized scoreboard respectively.  The stylized scoreboard can be dragged to a separate display which is projected to the audience of the match.\n\n      - Maximize / Restore\n\nThis button will maximize and restore the dimensions of the stylized scoreboard.\n");
        usageScrollPane.setViewportView(usageTextArea);

        tabbedContentPane.addTab("Usage & Controls", usageScrollPane);

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedContentPane, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedContentPane, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
        );

        aboutTextArea.setSelectionStart(0);
        aboutTextArea.setSelectionEnd(0);
        licenseTextArea.setSelectionStart(0);  
        licenseTextArea.setSelectionEnd(0);
        usageTextArea.setSelectionStart(0);
        usageTextArea.setSelectionEnd(0);

        getContentPane().add(contentPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane aboutScrollPane;
    private javax.swing.JTextPane aboutTextArea;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JScrollPane licenseScrollPane;
    private javax.swing.JTextArea licenseTextArea;
    private javax.swing.JButton okButton;
    private javax.swing.JTabbedPane tabbedContentPane;
    private javax.swing.JScrollPane usageScrollPane;
    private javax.swing.JTextPane usageTextArea;
    // End of variables declaration//GEN-END:variables

}
